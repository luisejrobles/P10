
P10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000162  00800200  00000540  000005d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000540  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800362  00800362  00000736  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000736  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013f9  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e93  00000000  00000000  00001c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d8  00000000  00000000  00002aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  000032c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067c  00000000  00000000  00003464  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f0  00000000  00000000  00003ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000041d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	bf c0       	rjmp	.+382    	; 0x1d4 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e4       	ldi	r30, 0x40	; 64
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 36       	cpi	r26, 0x62	; 98
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a2 e6       	ldi	r26, 0x62	; 98
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 38       	cpi	r26, 0x80	; 128
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	0d c2       	rjmp	.+1050   	; 0x53c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:



int main(void)
{
	UART0_Init(0);
 124:	80 e0       	ldi	r24, 0x00	; 0
	UART0_AutoBaudRate();
 126:	90 e0       	ldi	r25, 0x00	; 0
	Timer0_Ini();
 128:	19 d1       	rcall	.+562    	; 0x35c <UART0_Init>
	UART0_puts("P10 sonidito prro");
 12a:	8c d1       	rcall	.+792    	; 0x444 <UART0_AutoBaudRate>
 12c:	23 d0       	rcall	.+70     	; 0x174 <Timer0_Ini>
	UART0_puts("\n\r");
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	92 e0       	ldi	r25, 0x02	; 2
 132:	3d d1       	rcall	.+634    	; 0x3ae <UART0_puts>
 134:	83 e1       	ldi	r24, 0x13	; 19
	while(1){
		switch(UART0_getchar()){
 136:	92 e0       	ldi	r25, 0x02	; 2
 138:	3a d1       	rcall	.+628    	; 0x3ae <UART0_puts>
 13a:	29 d1       	rcall	.+594    	; 0x38e <UART0_getchar>
 13c:	80 37       	cpi	r24, 0x70	; 112
 13e:	89 f0       	breq	.+34     	; 0x162 <main+0x3e>
 140:	86 37       	cpi	r24, 0x76	; 118
 142:	19 f0       	breq	.+6      	; 0x14a <main+0x26>
			case 'v' : 
						UART0_puts("\n\r- Volumen");
 144:	86 35       	cpi	r24, 0x56	; 86
 146:	c9 f7       	brne	.-14     	; 0x13a <main+0x16>
						Timer2_Volume(-1);
 148:	06 c0       	rjmp	.+12     	; 0x156 <main+0x32>
 14a:	86 e1       	ldi	r24, 0x16	; 22
			break;
			case 'V' : 
						UART0_puts("\n\r+ Volumen");
 14c:	92 e0       	ldi	r25, 0x02	; 2
 14e:	2f d1       	rcall	.+606    	; 0x3ae <UART0_puts>
 150:	8f ef       	ldi	r24, 0xFF	; 255
						Timer2_Volume(1);
 152:	d3 d0       	rcall	.+422    	; 0x2fa <Timer2_Volume>
 154:	f2 cf       	rjmp	.-28     	; 0x13a <main+0x16>
			break;
 156:	82 e2       	ldi	r24, 0x22	; 34
			case 'p' : 
						UART0_puts("\n\rTocar cancion");
 158:	92 e0       	ldi	r25, 0x02	; 2
 15a:	29 d1       	rcall	.+594    	; 0x3ae <UART0_puts>
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	cd d0       	rcall	.+410    	; 0x2fa <Timer2_Volume>
						Timer2_Play(ImperialMarch,sizeof(ImperialMarch)/sizeof(struct note));
 160:	ec cf       	rjmp	.-40     	; 0x13a <main+0x16>
 162:	8e e2       	ldi	r24, 0x2E	; 46
 164:	92 e0       	ldi	r25, 0x02	; 2
 166:	23 d1       	rcall	.+582    	; 0x3ae <UART0_puts>
 168:	66 e4       	ldi	r22, 0x46	; 70
 16a:	70 e0       	ldi	r23, 0x00	; 0
			break;
 16c:	8e e3       	ldi	r24, 0x3E	; 62
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	b0 d0       	rcall	.+352    	; 0x2d2 <Timer2_Play>
 172:	e3 cf       	rjmp	.-58     	; 0x13a <main+0x16>

00000174 <Timer0_Ini>:

void Timer0_Ini ( void ){
	/* 	Permanece igual, ocasionando una interrupción 
		cada 1 ms en modo CTC. */
	// 1ms: 0.001/(1/(16M/64) = 250 
	TCCR0A = (2<<WGM00);	//Iniciando CTC
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (3<<CS00);		//64PS
 178:	93 e0       	ldi	r25, 0x03	; 3
 17a:	95 bd       	out	0x25, r25	; 37
	TCNT0  = 0;				//Iniciando contador
 17c:	16 bc       	out	0x26, r1	; 38
	OCR0A  = 250-1;			//1ms tope
 17e:	99 ef       	ldi	r25, 0xF9	; 249
 180:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<<OCIE0A);	//Habilitando interrupcion
 182:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
	sei();					//Habilitando interrupciones gobales
 186:	78 94       	sei
 188:	08 95       	ret

0000018a <Timer2_Freq_Gen>:
	/* 	Si "ticks" es mayor que 0 entonces, inicializa y habilita el Generador 
		de Frecuencia del Timer2 con el tope dado por "ticks".
		De lo contrario se requiere deshabilitar el Generador, generando de 
		esta forma el silencio (0 lógico).
		*/
	if(ticks > 0)
 18a:	88 23       	and	r24, r24
 18c:	01 f1       	breq	.+64     	; 0x1ce <Timer2_Freq_Gen+0x44>
	{
		//DDRH = (1<<DDH6);
		TCCR2A = (3<<WGM20)|(2<<COM2B0);			//PWM OCR2A TOP
 18e:	93 e2       	ldi	r25, 0x23	; 35
 190:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
		TCCR2B = (6<<CS20)|(1<<WGM22);				//256PS, COM2B0 non inverting
 194:	9e e0       	ldi	r25, 0x0E	; 14
 196:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
		OCR2A  = ticks -1 ;							//Tope en OCR2A
 19a:	81 50       	subi	r24, 0x01	; 1
 19c:	e3 eb       	ldi	r30, 0xB3	; 179
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 83       	st	Z, r24
		OCR2B = (OCR2A*volumen)/100;
 1a2:	40 81       	ld	r20, Z
 1a4:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <volumen>
 1a8:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <volumen+0x1>
 1ac:	48 9f       	mul	r20, r24
 1ae:	90 01       	movw	r18, r0
 1b0:	49 9f       	mul	r20, r25
 1b2:	30 0d       	add	r19, r0
 1b4:	11 24       	eor	r1, r1
 1b6:	36 95       	lsr	r19
 1b8:	27 95       	ror	r18
 1ba:	36 95       	lsr	r19
 1bc:	27 95       	ror	r18
 1be:	ab e7       	ldi	r26, 0x7B	; 123
 1c0:	b4 e1       	ldi	r27, 0x14	; 20
 1c2:	8b d1       	rcall	.+790    	; 0x4da <__umulhisi3>
 1c4:	96 95       	lsr	r25
 1c6:	87 95       	ror	r24
 1c8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>
 1cc:	08 95       	ret
	}else
	{
		//TCCR2B &= ~(6<<CS20);			//Deshabilitando PS para 0 logico
		TCCR2B = 0;						//Deshabilitando el generador
 1ce:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
 1d2:	08 95       	ret

000001d4 <__vector_21>:
	OCR0A  = 250-1;			//1ms tope
	TIMSK0 = (1<<OCIE0A);	//Habilitando interrupcion
	sei();					//Habilitando interrupciones gobales
}

ISR(TIMER0_COMPA_vect){ 
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	0b b6       	in	r0, 0x3b	; 59
 1e0:	0f 92       	push	r0
 1e2:	2f 93       	push	r18
 1e4:	3f 93       	push	r19
 1e6:	4f 93       	push	r20
 1e8:	5f 93       	push	r21
 1ea:	6f 93       	push	r22
 1ec:	7f 93       	push	r23
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
	/* 	Código para actualizar bandera de segundos */
	static uint16_t mSeg;
	mSeg++;
 1fa:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <__data_end>
 1fe:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <__data_end+0x1>
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <__data_end+0x1>
 208:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <__data_end>
	
	/*	Agregar las instrucciones necesarias para reproducir
		la siguiente nota en el arreglo dependiendo de la duración, 
		e insertar los silencios entre cada nota. */
	if(mSeg >= delay)
 20c:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <delay>
 210:	30 91 65 03 	lds	r19, 0x0365	; 0x800365 <delay+0x1>
 214:	82 17       	cp	r24, r18
 216:	93 07       	cpc	r25, r19
 218:	08 f4       	brcc	.+2      	; 0x21c <__vector_21+0x48>
 21a:	48 c0       	rjmp	.+144    	; 0x2ac <__vector_21+0xd8>
	{
		mSeg = 0;
 21c:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <__data_end+0x1>
 220:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <__data_end>
		if(cambio && cntNota != Fin)
 224:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 228:	88 23       	and	r24, r24
 22a:	a9 f1       	breq	.+106    	; 0x296 <__vector_21+0xc2>
 22c:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <cntNota>
 230:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <Fin>
 234:	98 17       	cp	r25, r24
 236:	79 f1       	breq	.+94     	; 0x296 <__vector_21+0xc2>
		{
			Timer2_Freq_Gen(TICKS(cancion[cntNota].freq));
 238:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <cntNota>
 23c:	e0 91 7e 03 	lds	r30, 0x037E	; 0x80037e <cancion>
 240:	f0 91 7f 03 	lds	r31, 0x037F	; 0x80037f <cancion+0x1>
 244:	94 e0       	ldi	r25, 0x04	; 4
 246:	89 9f       	mul	r24, r25
 248:	e0 0d       	add	r30, r0
 24a:	f1 1d       	adc	r31, r1
 24c:	11 24       	eor	r1, r1
 24e:	20 81       	ld	r18, Z
 250:	31 81       	ldd	r19, Z+1	; 0x01
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	64 e2       	ldi	r22, 0x24	; 36
 258:	74 ef       	ldi	r23, 0xF4	; 244
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	21 d1       	rcall	.+578    	; 0x4a2 <__divmodsi4>
 260:	82 2f       	mov	r24, r18
 262:	93 df       	rcall	.-218    	; 0x18a <Timer2_Freq_Gen>
			cambio = 0;
 264:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
			delay = cancion[cntNota].delay;
 268:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <cntNota>
 26c:	e0 91 7e 03 	lds	r30, 0x037E	; 0x80037e <cancion>
 270:	f0 91 7f 03 	lds	r31, 0x037F	; 0x80037f <cancion+0x1>
 274:	94 e0       	ldi	r25, 0x04	; 4
 276:	89 9f       	mul	r24, r25
 278:	e0 0d       	add	r30, r0
 27a:	f1 1d       	adc	r31, r1
 27c:	11 24       	eor	r1, r1
 27e:	82 81       	ldd	r24, Z+2	; 0x02
 280:	93 81       	ldd	r25, Z+3	; 0x03
 282:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <delay+0x1>
 286:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <delay>
			cntNota++;
 28a:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <cntNota>
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <cntNota>
 294:	0b c0       	rjmp	.+22     	; 0x2ac <__vector_21+0xd8>
		}else
		{
			cambio = 1;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			Timer2_Freq_Gen(0);
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	75 df       	rcall	.-278    	; 0x18a <Timer2_Freq_Gen>
			delay = SILENCE;
 2a0:	8a e0       	ldi	r24, 0x0A	; 10
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <delay+0x1>
 2a8:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <delay>
		}
	}		
}
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	7f 91       	pop	r23
 2ba:	6f 91       	pop	r22
 2bc:	5f 91       	pop	r21
 2be:	4f 91       	pop	r20
 2c0:	3f 91       	pop	r19
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0b be       	out	0x3b, r0	; 59
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <Timer2_Play>:

void Timer2_Play(const struct note song[],unsigned int len)
{	
	/*	Función que establece las condiciones necesarias para que
		el generador recorra el arreglo de notas. */
	cancion = song;
 2d2:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <cancion+0x1>
 2d6:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <cancion>
	cntNota = 0;				//obteniendo principio de musica
 2da:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <cntNota>
	Fin = len;			//Obteniendo final de musica
 2de:	60 93 7c 03 	sts	0x037C, r22	; 0x80037c <Fin>
	volumen = 50;			//Volumen a la mitad
 2e2:	82 e3       	ldi	r24, 0x32	; 50
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <volumen+0x1>
 2ea:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <volumen>
	DDRH |= (1<<DDH6);
 2ee:	e1 e0       	ldi	r30, 0x01	; 1
 2f0:	f1 e0       	ldi	r31, 0x01	; 1
 2f2:	80 81       	ld	r24, Z
 2f4:	80 64       	ori	r24, 0x40	; 64
 2f6:	80 83       	st	Z, r24
 2f8:	08 95       	ret

000002fa <Timer2_Volume>:
}

void Timer2_Volume(int8_t direction){
	/* 	Ajusta el ciclo de trabajo para incrementar o decrementar  el volumen
	   	de las notas que se estan generando. */
	if(direction == 1)
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	89 f4       	brne	.+34     	; 0x320 <Timer2_Volume+0x26>
	{
		if(volumen <= 80)
 2fe:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <volumen>
 302:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <volumen+0x1>
 306:	81 35       	cpi	r24, 0x51	; 81
 308:	91 05       	cpc	r25, r1
 30a:	c8 f4       	brcc	.+50     	; 0x33e <Timer2_Volume+0x44>
		{
			volumen += 5;
 30c:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <volumen>
 310:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <volumen+0x1>
 314:	05 96       	adiw	r24, 0x05	; 5
 316:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <volumen+0x1>
 31a:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <volumen>
 31e:	0f c0       	rjmp	.+30     	; 0x33e <Timer2_Volume+0x44>
		}		
	}else
	{
		if( volumen >= 5)
 320:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <volumen>
 324:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <volumen+0x1>
 328:	05 97       	sbiw	r24, 0x05	; 5
 32a:	48 f0       	brcs	.+18     	; 0x33e <Timer2_Volume+0x44>
		{
			volumen -= 5;
 32c:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <volumen>
 330:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <volumen+0x1>
 334:	05 97       	sbiw	r24, 0x05	; 5
 336:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <volumen+0x1>
 33a:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <volumen>
		}
	}
	
	itoa(volumenChar,volumen,10);
 33e:	60 91 7a 03 	lds	r22, 0x037A	; 0x80037a <volumen>
 342:	70 91 7b 03 	lds	r23, 0x037B	; 0x80037b <volumen+0x1>
 346:	4a e0       	ldi	r20, 0x0A	; 10
 348:	86 e6       	ldi	r24, 0x66	; 102
 34a:	93 e0       	ldi	r25, 0x03	; 3
 34c:	3e d0       	rcall	.+124    	; 0x3ca <itoa>
	UART0_puts("\n\rVolumen: ");
 34e:	86 e5       	ldi	r24, 0x56	; 86
 350:	93 e0       	ldi	r25, 0x03	; 3
	UART0_puts(volumenChar);
 352:	2d d0       	rcall	.+90     	; 0x3ae <UART0_puts>
 354:	86 e6       	ldi	r24, 0x66	; 102
 356:	93 e0       	ldi	r25, 0x03	; 3
 358:	2a c0       	rjmp	.+84     	; 0x3ae <UART0_puts>
 35a:	08 95       	ret

0000035c <UART0_Init>:
			exp = exp*10;
			count--;
		}
	}
	return num;
}
 35c:	22 e0       	ldi	r18, 0x02	; 2
 35e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 362:	28 e1       	ldi	r18, 0x18	; 24
 364:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 368:	26 e0       	ldi	r18, 0x06	; 6
 36a:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 36e:	89 2b       	or	r24, r25
 370:	39 f4       	brne	.+14     	; 0x380 <UART0_Init+0x24>
 372:	8f ec       	ldi	r24, 0xCF	; 207
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 37a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 37e:	08 95       	ret
 380:	87 e6       	ldi	r24, 0x67	; 103
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 388:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 38c:	08 95       	ret

0000038e <UART0_getchar>:
 38e:	e0 ec       	ldi	r30, 0xC0	; 192
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	88 23       	and	r24, r24
 396:	ec f7       	brge	.-6      	; 0x392 <UART0_getchar+0x4>
 398:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 39c:	08 95       	ret

0000039e <UART0_putchar>:
 39e:	e0 ec       	ldi	r30, 0xC0	; 192
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	90 81       	ld	r25, Z
 3a4:	95 ff       	sbrs	r25, 5
 3a6:	fd cf       	rjmp	.-6      	; 0x3a2 <UART0_putchar+0x4>
 3a8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 3ac:	08 95       	ret

000003ae <UART0_puts>:
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	ec 01       	movw	r28, r24
 3b4:	88 81       	ld	r24, Y
 3b6:	88 23       	and	r24, r24
 3b8:	29 f0       	breq	.+10     	; 0x3c4 <UART0_puts+0x16>
 3ba:	21 96       	adiw	r28, 0x01	; 1
 3bc:	f0 df       	rcall	.-32     	; 0x39e <UART0_putchar>
 3be:	89 91       	ld	r24, Y+
 3c0:	81 11       	cpse	r24, r1
 3c2:	fc cf       	rjmp	.-8      	; 0x3bc <UART0_puts+0xe>
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <itoa>:
 3ca:	0f 93       	push	r16
 3cc:	1f 93       	push	r17
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	fc 01       	movw	r30, r24
 3d4:	9b 01       	movw	r18, r22
 3d6:	c0 e0       	ldi	r28, 0x00	; 0
 3d8:	d0 e0       	ldi	r29, 0x00	; 0
 3da:	04 2f       	mov	r16, r20
 3dc:	10 e0       	ldi	r17, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <itoa+0x1a>
 3e0:	ec 01       	movw	r28, r24
 3e2:	fd 01       	movw	r30, r26
 3e4:	c9 01       	movw	r24, r18
 3e6:	b8 01       	movw	r22, r16
 3e8:	48 d0       	rcall	.+144    	; 0x47a <__udivmodhi4>
 3ea:	26 2f       	mov	r18, r22
 3ec:	37 2f       	mov	r19, r23
 3ee:	8a 30       	cpi	r24, 0x0A	; 10
 3f0:	91 05       	cpc	r25, r1
 3f2:	10 f0       	brcs	.+4      	; 0x3f8 <itoa+0x2e>
 3f4:	89 5c       	subi	r24, 0xC9	; 201
 3f6:	01 c0       	rjmp	.+2      	; 0x3fa <itoa+0x30>
 3f8:	80 5d       	subi	r24, 0xD0	; 208
 3fa:	df 01       	movw	r26, r30
 3fc:	11 96       	adiw	r26, 0x01	; 1
 3fe:	80 83       	st	Z, r24
 400:	ce 01       	movw	r24, r28
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	21 15       	cp	r18, r1
 406:	31 05       	cpc	r19, r1
 408:	59 f7       	brne	.-42     	; 0x3e0 <itoa+0x16>
 40a:	11 82       	std	Z+1, r1	; 0x01
 40c:	a8 1b       	sub	r26, r24
 40e:	b9 0b       	sbc	r27, r25
 410:	20 97       	sbiw	r28, 0x00	; 0
 412:	99 f0       	breq	.+38     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 414:	fd 01       	movw	r30, r26
 416:	a8 0f       	add	r26, r24
 418:	b9 1f       	adc	r27, r25
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	20 81       	ld	r18, Z
 420:	3e 91       	ld	r19, -X
 422:	23 17       	cp	r18, r19
 424:	11 f0       	breq	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 426:	30 83       	st	Z, r19
 428:	2c 93       	st	X, r18
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	31 96       	adiw	r30, 0x01	; 1
 42e:	9e 01       	movw	r18, r28
 430:	28 1b       	sub	r18, r24
 432:	39 0b       	sbc	r19, r25
 434:	82 17       	cp	r24, r18
 436:	93 07       	cpc	r25, r19
 438:	90 f3       	brcs	.-28     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	1f 91       	pop	r17
 440:	0f 91       	pop	r16
 442:	08 95       	ret

00000444 <UART0_AutoBaudRate>:

void UART0_AutoBaudRate(void)
{
	DDRE = ~(1<<PE0);		//PE0 input
 444:	8e ef       	ldi	r24, 0xFE	; 254
 446:	8d b9       	out	0x0d, r24	; 13
	UCSR0A = (1<<U2X0);		//Double speed
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0B = ((1<<RXEN0)|(1<<TXEN0))&(~(1<<UCSZ02)); // Reception enable | Transmission enable | 9bit disable
 44e:	98 e1       	ldi	r25, 0x18	; 24
 450:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (3<<UCSZ00);	//8bit enable
 454:	96 e0       	ldi	r25, 0x06	; 6
 456:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	TCCR0A = 0;				//Normal Mode
 45a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 2;				//8 PS
 45c:	85 bd       	out	0x25, r24	; 37
	while(PINE& (1<<PE0));	//Loop mientras haya 1
 45e:	60 99       	sbic	0x0c, 0	; 12
 460:	fe cf       	rjmp	.-4      	; 0x45e <UART0_AutoBaudRate+0x1a>
	TCNT0 = 0;				//Inicializa contador
 462:	16 bc       	out	0x26, r1	; 38
	while(!(PINE&(1<<PE0)));//Loop mientras no sea en alto
 464:	60 9b       	sbis	0x0c, 0	; 12
 466:	fe cf       	rjmp	.-4      	; 0x464 <UART0_AutoBaudRate+0x20>
	TCCR0B = 0;
 468:	15 bc       	out	0x25, r1	; 37
	UBRR0 = TCNT0 - 1;		//Setting Baud Rate
 46a:	86 b5       	in	r24, 0x26	; 38
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 474:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 478:	08 95       	ret

0000047a <__udivmodhi4>:
 47a:	aa 1b       	sub	r26, r26
 47c:	bb 1b       	sub	r27, r27
 47e:	51 e1       	ldi	r21, 0x11	; 17
 480:	07 c0       	rjmp	.+14     	; 0x490 <__udivmodhi4_ep>

00000482 <__udivmodhi4_loop>:
 482:	aa 1f       	adc	r26, r26
 484:	bb 1f       	adc	r27, r27
 486:	a6 17       	cp	r26, r22
 488:	b7 07       	cpc	r27, r23
 48a:	10 f0       	brcs	.+4      	; 0x490 <__udivmodhi4_ep>
 48c:	a6 1b       	sub	r26, r22
 48e:	b7 0b       	sbc	r27, r23

00000490 <__udivmodhi4_ep>:
 490:	88 1f       	adc	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	5a 95       	dec	r21
 496:	a9 f7       	brne	.-22     	; 0x482 <__udivmodhi4_loop>
 498:	80 95       	com	r24
 49a:	90 95       	com	r25
 49c:	bc 01       	movw	r22, r24
 49e:	cd 01       	movw	r24, r26
 4a0:	08 95       	ret

000004a2 <__divmodsi4>:
 4a2:	05 2e       	mov	r0, r21
 4a4:	97 fb       	bst	r25, 7
 4a6:	16 f4       	brtc	.+4      	; 0x4ac <__divmodsi4+0xa>
 4a8:	00 94       	com	r0
 4aa:	0f d0       	rcall	.+30     	; 0x4ca <__negsi2>
 4ac:	57 fd       	sbrc	r21, 7
 4ae:	05 d0       	rcall	.+10     	; 0x4ba <__divmodsi4_neg2>
 4b0:	23 d0       	rcall	.+70     	; 0x4f8 <__udivmodsi4>
 4b2:	07 fc       	sbrc	r0, 7
 4b4:	02 d0       	rcall	.+4      	; 0x4ba <__divmodsi4_neg2>
 4b6:	46 f4       	brtc	.+16     	; 0x4c8 <__divmodsi4_exit>
 4b8:	08 c0       	rjmp	.+16     	; 0x4ca <__negsi2>

000004ba <__divmodsi4_neg2>:
 4ba:	50 95       	com	r21
 4bc:	40 95       	com	r20
 4be:	30 95       	com	r19
 4c0:	21 95       	neg	r18
 4c2:	3f 4f       	sbci	r19, 0xFF	; 255
 4c4:	4f 4f       	sbci	r20, 0xFF	; 255
 4c6:	5f 4f       	sbci	r21, 0xFF	; 255

000004c8 <__divmodsi4_exit>:
 4c8:	08 95       	ret

000004ca <__negsi2>:
 4ca:	90 95       	com	r25
 4cc:	80 95       	com	r24
 4ce:	70 95       	com	r23
 4d0:	61 95       	neg	r22
 4d2:	7f 4f       	sbci	r23, 0xFF	; 255
 4d4:	8f 4f       	sbci	r24, 0xFF	; 255
 4d6:	9f 4f       	sbci	r25, 0xFF	; 255
 4d8:	08 95       	ret

000004da <__umulhisi3>:
 4da:	a2 9f       	mul	r26, r18
 4dc:	b0 01       	movw	r22, r0
 4de:	b3 9f       	mul	r27, r19
 4e0:	c0 01       	movw	r24, r0
 4e2:	a3 9f       	mul	r26, r19
 4e4:	70 0d       	add	r23, r0
 4e6:	81 1d       	adc	r24, r1
 4e8:	11 24       	eor	r1, r1
 4ea:	91 1d       	adc	r25, r1
 4ec:	b2 9f       	mul	r27, r18
 4ee:	70 0d       	add	r23, r0
 4f0:	81 1d       	adc	r24, r1
 4f2:	11 24       	eor	r1, r1
 4f4:	91 1d       	adc	r25, r1
 4f6:	08 95       	ret

000004f8 <__udivmodsi4>:
 4f8:	a1 e2       	ldi	r26, 0x21	; 33
 4fa:	1a 2e       	mov	r1, r26
 4fc:	aa 1b       	sub	r26, r26
 4fe:	bb 1b       	sub	r27, r27
 500:	fd 01       	movw	r30, r26
 502:	0d c0       	rjmp	.+26     	; 0x51e <__udivmodsi4_ep>

00000504 <__udivmodsi4_loop>:
 504:	aa 1f       	adc	r26, r26
 506:	bb 1f       	adc	r27, r27
 508:	ee 1f       	adc	r30, r30
 50a:	ff 1f       	adc	r31, r31
 50c:	a2 17       	cp	r26, r18
 50e:	b3 07       	cpc	r27, r19
 510:	e4 07       	cpc	r30, r20
 512:	f5 07       	cpc	r31, r21
 514:	20 f0       	brcs	.+8      	; 0x51e <__udivmodsi4_ep>
 516:	a2 1b       	sub	r26, r18
 518:	b3 0b       	sbc	r27, r19
 51a:	e4 0b       	sbc	r30, r20
 51c:	f5 0b       	sbc	r31, r21

0000051e <__udivmodsi4_ep>:
 51e:	66 1f       	adc	r22, r22
 520:	77 1f       	adc	r23, r23
 522:	88 1f       	adc	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	1a 94       	dec	r1
 528:	69 f7       	brne	.-38     	; 0x504 <__udivmodsi4_loop>
 52a:	60 95       	com	r22
 52c:	70 95       	com	r23
 52e:	80 95       	com	r24
 530:	90 95       	com	r25
 532:	9b 01       	movw	r18, r22
 534:	ac 01       	movw	r20, r24
 536:	bd 01       	movw	r22, r26
 538:	cf 01       	movw	r24, r30
 53a:	08 95       	ret

0000053c <_exit>:
 53c:	f8 94       	cli

0000053e <__stop_program>:
 53e:	ff cf       	rjmp	.-2      	; 0x53e <__stop_program>
