
P10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000126  00800200  00000386  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000386  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800326  00800326  00000540  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012e2  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e79  00000000  00000000  0000194a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000076b  00000000  00000000  000027c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000657  00000000  00000000  0000309c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000644  00000000  00000000  000036f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003d37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	8d c0       	rjmp	.+282    	; 0x170 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e8       	ldi	r30, 0x86	; 134
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 32       	cpi	r26, 0x26	; 38
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a6 e2       	ldi	r26, 0x26	; 38
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 34       	cpi	r26, 0x41	; 65
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	30 c1       	rjmp	.+608    	; 0x382 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
	//and we're done
};

int main(void)
{
	UART0_Init(1);
 124:	81 e0       	ldi	r24, 0x01	; 1
	UART0_AutoBaudRate();
	
	Timer0_Ini();
 126:	90 e0       	ldi	r25, 0x00	; 0
    
	while(1){
		if (/*UART0_available()*/UART0_getchar()){
 128:	76 d0       	rcall	.+236    	; 0x216 <UART0_Init>
 12a:	e9 d0       	rcall	.+466    	; 0x2fe <UART0_AutoBaudRate>
 12c:	16 d0       	rcall	.+44     	; 0x15a <Timer0_Ini>
			// Play Song
			if(UART0_getchar() == 'p'){
 12e:	8c d0       	rcall	.+280    	; 0x248 <UART0_getchar>
 130:	88 23       	and	r24, r24
				Timer2_Play(ImperialMarch,sizeof(ImperialMarch)/sizeof(struct note));
 132:	e9 f3       	breq	.-6      	; 0x12e <main+0xa>
 134:	89 d0       	rcall	.+274    	; 0x248 <UART0_getchar>
 136:	80 37       	cpi	r24, 0x70	; 112
			}
			//Increase Volume
			if(UART0_getchar() == 'V'){
 138:	29 f4       	brne	.+10     	; 0x144 <main+0x20>
 13a:	66 e4       	ldi	r22, 0x46	; 70
 13c:	70 e0       	ldi	r23, 0x00	; 0
				Timer2_Volume(1);
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	92 e0       	ldi	r25, 0x02	; 2
 142:	2d d0       	rcall	.+90     	; 0x19e <Timer2_Play>
			}
			//Decrease Volume
			if(UART0_getchar() == 'v'){
 144:	81 d0       	rcall	.+258    	; 0x248 <UART0_getchar>
 146:	86 35       	cpi	r24, 0x56	; 86
 148:	11 f4       	brne	.+4      	; 0x14e <main+0x2a>
 14a:	81 e0       	ldi	r24, 0x01	; 1
				Timer2_Volume(-1);;
 14c:	37 d0       	rcall	.+110    	; 0x1bc <Timer2_Volume>
 14e:	7c d0       	rcall	.+248    	; 0x248 <UART0_getchar>
 150:	86 37       	cpi	r24, 0x76	; 118
 152:	69 f7       	brne	.-38     	; 0x12e <main+0xa>
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	32 d0       	rcall	.+100    	; 0x1bc <Timer2_Volume>
 158:	ea cf       	rjmp	.-44     	; 0x12e <main+0xa>

0000015a <Timer0_Ini>:
		TCCR2A = (3<<WGM20);						 //PWM OCR2A TOP
		TCCR2B = (6<<CS20)|(2<<COM2B0)|(1<<WGM22);	 //256PS, COM2B0 non inverting
		OCR2A  = ticks -1 ;							 //Tope en OCR2A
	}else
	{
		TCCR2B &= ~(6<<CS20);			//Deshabilitando PS para 0 logico
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	84 bd       	out	0x24, r24	; 36
 15e:	93 e0       	ldi	r25, 0x03	; 3
 160:	95 bd       	out	0x25, r25	; 37
 162:	16 bc       	out	0x26, r1	; 38
 164:	99 ef       	ldi	r25, 0xF9	; 249
 166:	97 bd       	out	0x27, r25	; 39
 168:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 16c:	78 94       	sei
 16e:	08 95       	ret

00000170 <__vector_21>:
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <__data_end>
 182:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <__data_end+0x1>
 186:	02 96       	adiw	r24, 0x02	; 2
 188:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <__data_end+0x1>
 18c:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <__data_end>
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <Timer2_Play>:
void Timer2_Play(const struct note song[],unsigned int len)
{	
	/*	Función que establece las condiciones necesarias para que
		el generador recorra el arreglo de notas. */
	
	cancion = &song[0];
 19e:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <cancion+0x1>
 1a2:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <cancion>
	nota = 0;				//obteniendo principio de musica
 1a6:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <nota>
	notaFin = len;			//Obteniendo final de musica
 1aa:	60 93 3d 03 	sts	0x033D, r22	; 0x80033d <notaFin>
	volumen = 50;			//Volumen a la mitad
 1ae:	82 e3       	ldi	r24, 0x32	; 50
 1b0:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <volumen>
	DDRH = (1<<DDH6);		//PB4 como salida
 1b4:	80 e4       	ldi	r24, 0x40	; 64
 1b6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
 1ba:	08 95       	ret

000001bc <Timer2_Volume>:

void Timer2_Volume(int8_t direction){
	/* 	Ajusta el ciclo de trabajo para incrementar o decrementar  el volumen
	   	de las notas que se estan generando. */
	
	if(volumen <= 80)
 1bc:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <volumen>
 1c0:	81 35       	cpi	r24, 0x51	; 81
 1c2:	30 f4       	brcc	.+12     	; 0x1d0 <Timer2_Volume+0x14>
	{
		volumen += 10;
 1c4:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <volumen>
 1c8:	86 5f       	subi	r24, 0xF6	; 246
 1ca:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <volumen>
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <Timer2_Volume+0x26>
	}
	else if( volumen >= 10)
 1d0:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <volumen>
 1d4:	8a 30       	cpi	r24, 0x0A	; 10
 1d6:	28 f0       	brcs	.+10     	; 0x1e2 <Timer2_Volume+0x26>
	{
		volumen -= 10;	
 1d8:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <volumen>
 1dc:	8a 50       	subi	r24, 0x0A	; 10
 1de:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <volumen>
	}
	
	OCR2B = (OCR2A*volumen)/100;
 1e2:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
 1e6:	90 91 3c 03 	lds	r25, 0x033C	; 0x80033c <volumen>
 1ea:	89 9f       	mul	r24, r25
 1ec:	c0 01       	movw	r24, r0
 1ee:	11 24       	eor	r1, r1
 1f0:	64 e6       	ldi	r22, 0x64	; 100
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	b3 d0       	rcall	.+358    	; 0x35c <__divmodhi4>
 1f6:	e4 eb       	ldi	r30, 0xB4	; 180
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	60 83       	st	Z, r22
	itoa(volumenChar,OCR2B,10);
 1fc:	60 81       	ld	r22, Z
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	4a e0       	ldi	r20, 0x0A	; 10
 202:	88 e2       	ldi	r24, 0x28	; 40
 204:	93 e0       	ldi	r25, 0x03	; 3
	UART0_puts("\n\r\n\rVolumen: ");
 206:	3e d0       	rcall	.+124    	; 0x284 <itoa>
 208:	88 e1       	ldi	r24, 0x18	; 24
	UART0_puts(volumenChar);
 20a:	93 e0       	ldi	r25, 0x03	; 3
 20c:	2d d0       	rcall	.+90     	; 0x268 <UART0_puts>
 20e:	88 e2       	ldi	r24, 0x28	; 40
 210:	93 e0       	ldi	r25, 0x03	; 3
 212:	2a c0       	rjmp	.+84     	; 0x268 <UART0_puts>
 214:	08 95       	ret

00000216 <UART0_Init>:
			exp = exp*10;
			count--;
		}
	}
	return num;
}
 216:	22 e0       	ldi	r18, 0x02	; 2
 218:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 21c:	28 e1       	ldi	r18, 0x18	; 24
 21e:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 222:	26 e0       	ldi	r18, 0x06	; 6
 224:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 228:	89 2b       	or	r24, r25
 22a:	39 f4       	brne	.+14     	; 0x23a <UART0_Init+0x24>
 22c:	8f ec       	ldi	r24, 0xCF	; 207
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 234:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 238:	08 95       	ret
 23a:	87 e6       	ldi	r24, 0x67	; 103
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 242:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 246:	08 95       	ret

00000248 <UART0_getchar>:
 248:	e0 ec       	ldi	r30, 0xC0	; 192
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	88 23       	and	r24, r24
 250:	ec f7       	brge	.-6      	; 0x24c <UART0_getchar+0x4>
 252:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 256:	08 95       	ret

00000258 <UART0_putchar>:
 258:	e0 ec       	ldi	r30, 0xC0	; 192
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	90 81       	ld	r25, Z
 25e:	95 ff       	sbrs	r25, 5
 260:	fd cf       	rjmp	.-6      	; 0x25c <UART0_putchar+0x4>
 262:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 266:	08 95       	ret

00000268 <UART0_puts>:
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	ec 01       	movw	r28, r24
 26e:	88 81       	ld	r24, Y
 270:	88 23       	and	r24, r24
 272:	29 f0       	breq	.+10     	; 0x27e <UART0_puts+0x16>
 274:	21 96       	adiw	r28, 0x01	; 1
 276:	f0 df       	rcall	.-32     	; 0x258 <UART0_putchar>
 278:	89 91       	ld	r24, Y+
 27a:	81 11       	cpse	r24, r1
 27c:	fc cf       	rjmp	.-8      	; 0x276 <UART0_puts+0xe>
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <itoa>:
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	fc 01       	movw	r30, r24
 28e:	9b 01       	movw	r18, r22
 290:	c0 e0       	ldi	r28, 0x00	; 0
 292:	d0 e0       	ldi	r29, 0x00	; 0
 294:	04 2f       	mov	r16, r20
 296:	10 e0       	ldi	r17, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <itoa+0x1a>
 29a:	ec 01       	movw	r28, r24
 29c:	fd 01       	movw	r30, r26
 29e:	c9 01       	movw	r24, r18
 2a0:	b8 01       	movw	r22, r16
 2a2:	48 d0       	rcall	.+144    	; 0x334 <__udivmodhi4>
 2a4:	26 2f       	mov	r18, r22
 2a6:	37 2f       	mov	r19, r23
 2a8:	8a 30       	cpi	r24, 0x0A	; 10
 2aa:	91 05       	cpc	r25, r1
 2ac:	10 f0       	brcs	.+4      	; 0x2b2 <itoa+0x2e>
 2ae:	89 5c       	subi	r24, 0xC9	; 201
 2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <itoa+0x30>
 2b2:	80 5d       	subi	r24, 0xD0	; 208
 2b4:	df 01       	movw	r26, r30
 2b6:	11 96       	adiw	r26, 0x01	; 1
 2b8:	80 83       	st	Z, r24
 2ba:	ce 01       	movw	r24, r28
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	21 15       	cp	r18, r1
 2c0:	31 05       	cpc	r19, r1
 2c2:	59 f7       	brne	.-42     	; 0x29a <itoa+0x16>
 2c4:	11 82       	std	Z+1, r1	; 0x01
 2c6:	a8 1b       	sub	r26, r24
 2c8:	b9 0b       	sbc	r27, r25
 2ca:	20 97       	sbiw	r28, 0x00	; 0
 2cc:	99 f0       	breq	.+38     	; 0x2f4 <itoa+0x70>
 2ce:	fd 01       	movw	r30, r26
 2d0:	a8 0f       	add	r26, r24
 2d2:	b9 1f       	adc	r27, r25
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	20 81       	ld	r18, Z
 2da:	3e 91       	ld	r19, -X
 2dc:	23 17       	cp	r18, r19
 2de:	11 f0       	breq	.+4      	; 0x2e4 <itoa+0x60>
 2e0:	30 83       	st	Z, r19
 2e2:	2c 93       	st	X, r18
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	31 96       	adiw	r30, 0x01	; 1
 2e8:	9e 01       	movw	r18, r28
 2ea:	28 1b       	sub	r18, r24
 2ec:	39 0b       	sbc	r19, r25
 2ee:	82 17       	cp	r24, r18
 2f0:	93 07       	cpc	r25, r19
 2f2:	90 f3       	brcs	.-28     	; 0x2d8 <itoa+0x54>
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	08 95       	ret

000002fe <UART0_AutoBaudRate>:

void UART0_AutoBaudRate(void)
{
	DDRE = ~(1<<PE0);		//PE0 input
 2fe:	8e ef       	ldi	r24, 0xFE	; 254
 300:	8d b9       	out	0x0d, r24	; 13
	UCSR0A = (1<<U2X0);		//Double speed
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0B = ((1<<RXEN0)|(1<<TXEN0))&(~(1<<UCSZ02)); // Reception enable | Transmission enable | 9bit disable
 308:	98 e1       	ldi	r25, 0x18	; 24
 30a:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (3<<UCSZ00);	//8bit enable
 30e:	96 e0       	ldi	r25, 0x06	; 6
 310:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	TCCR0A = 0;				//Normal Mode
 314:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 2;				//8 PS
 316:	85 bd       	out	0x25, r24	; 37
	while(PINE& (1<<PE0));	//Loop mientras haya 1
 318:	60 99       	sbic	0x0c, 0	; 12
 31a:	fe cf       	rjmp	.-4      	; 0x318 <UART0_AutoBaudRate+0x1a>
	TCNT0 = 0;				//Inicializa contador
 31c:	16 bc       	out	0x26, r1	; 38
	while(!(PINE&(1<<PE0)));//Loop mientras no sea en alto
 31e:	60 9b       	sbis	0x0c, 0	; 12
 320:	fe cf       	rjmp	.-4      	; 0x31e <UART0_AutoBaudRate+0x20>
	TCCR0B = 0;
 322:	15 bc       	out	0x25, r1	; 37
	UBRR0 = TCNT0 - 1;		//Setting Baud Rate
 324:	86 b5       	in	r24, 0x26	; 38
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 32e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 332:	08 95       	ret

00000334 <__udivmodhi4>:
 334:	aa 1b       	sub	r26, r26
 336:	bb 1b       	sub	r27, r27
 338:	51 e1       	ldi	r21, 0x11	; 17
 33a:	07 c0       	rjmp	.+14     	; 0x34a <__udivmodhi4_ep>

0000033c <__udivmodhi4_loop>:
 33c:	aa 1f       	adc	r26, r26
 33e:	bb 1f       	adc	r27, r27
 340:	a6 17       	cp	r26, r22
 342:	b7 07       	cpc	r27, r23
 344:	10 f0       	brcs	.+4      	; 0x34a <__udivmodhi4_ep>
 346:	a6 1b       	sub	r26, r22
 348:	b7 0b       	sbc	r27, r23

0000034a <__udivmodhi4_ep>:
 34a:	88 1f       	adc	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	5a 95       	dec	r21
 350:	a9 f7       	brne	.-22     	; 0x33c <__udivmodhi4_loop>
 352:	80 95       	com	r24
 354:	90 95       	com	r25
 356:	bc 01       	movw	r22, r24
 358:	cd 01       	movw	r24, r26
 35a:	08 95       	ret

0000035c <__divmodhi4>:
 35c:	97 fb       	bst	r25, 7
 35e:	07 2e       	mov	r0, r23
 360:	16 f4       	brtc	.+4      	; 0x366 <__divmodhi4+0xa>
 362:	00 94       	com	r0
 364:	06 d0       	rcall	.+12     	; 0x372 <__divmodhi4_neg1>
 366:	77 fd       	sbrc	r23, 7
 368:	08 d0       	rcall	.+16     	; 0x37a <__divmodhi4_neg2>
 36a:	e4 df       	rcall	.-56     	; 0x334 <__udivmodhi4>
 36c:	07 fc       	sbrc	r0, 7
 36e:	05 d0       	rcall	.+10     	; 0x37a <__divmodhi4_neg2>
 370:	3e f4       	brtc	.+14     	; 0x380 <__divmodhi4_exit>

00000372 <__divmodhi4_neg1>:
 372:	90 95       	com	r25
 374:	81 95       	neg	r24
 376:	9f 4f       	sbci	r25, 0xFF	; 255
 378:	08 95       	ret

0000037a <__divmodhi4_neg2>:
 37a:	70 95       	com	r23
 37c:	61 95       	neg	r22
 37e:	7f 4f       	sbci	r23, 0xFF	; 255

00000380 <__divmodhi4_exit>:
 380:	08 95       	ret

00000382 <_exit>:
 382:	f8 94       	cli

00000384 <__stop_program>:
 384:	ff cf       	rjmp	.-2      	; 0x384 <__stop_program>
