
P10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800200  0000044a  000004de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800318  00800318  000005f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012bc  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e6a  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b0  00000000  00000000  00002846  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00002ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000661  00000000  00000000  000031a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006eb  00000000  00000000  00003801  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003eec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	9f c0       	rjmp	.+318    	; 0x194 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e4       	ldi	r30, 0x4A	; 74
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 31       	cpi	r26, 0x18	; 24
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a8 e1       	ldi	r26, 0x18	; 24
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 32       	cpi	r26, 0x21	; 33
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	92 c1       	rjmp	.+804    	; 0x446 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
	//and we're done
};

int main(void)
{
	UART0_Init(1);
 124:	81 e0       	ldi	r24, 0x01	; 1
	UART0_AutoBaudRate();
	
	Timer0_Ini();
 126:	90 e0       	ldi	r25, 0x00	; 0
    
	while(1){
		if (/*UART0_available()*/UART0_getchar()){
 128:	ed d0       	rcall	.+474    	; 0x304 <UART0_Init>
 12a:	0d d1       	rcall	.+538    	; 0x346 <UART0_AutoBaudRate>
 12c:	16 d0       	rcall	.+44     	; 0x15a <Timer0_Ini>
			// Play Song
			if(UART0_getchar() == 'p'){
 12e:	03 d1       	rcall	.+518    	; 0x336 <UART0_getchar>
 130:	88 23       	and	r24, r24
				Timer2_Play(ImperialMarch,sizeof(ImperialMarch)/sizeof(struct note));
 132:	e9 f3       	breq	.-6      	; 0x12e <main+0xa>
 134:	00 d1       	rcall	.+512    	; 0x336 <UART0_getchar>
 136:	80 37       	cpi	r24, 0x70	; 112
			}
			//Increase Volume
			if(UART0_getchar() == 'V'){
 138:	29 f4       	brne	.+10     	; 0x144 <main+0x20>
 13a:	66 e4       	ldi	r22, 0x46	; 70
 13c:	70 e0       	ldi	r23, 0x00	; 0
				Timer2_Volume(1);
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	92 e0       	ldi	r25, 0x02	; 2
 142:	b2 d0       	rcall	.+356    	; 0x2a8 <Timer2_Play>
			}
			//Decrease Volume
			if(UART0_getchar() == 'v'){
 144:	f8 d0       	rcall	.+496    	; 0x336 <UART0_getchar>
 146:	86 35       	cpi	r24, 0x56	; 86
 148:	11 f4       	brne	.+4      	; 0x14e <main+0x2a>
 14a:	81 e0       	ldi	r24, 0x01	; 1
				Timer2_Volume(-1);;
 14c:	b9 d0       	rcall	.+370    	; 0x2c0 <Timer2_Volume>
 14e:	f3 d0       	rcall	.+486    	; 0x336 <UART0_getchar>
 150:	86 37       	cpi	r24, 0x76	; 118
 152:	69 f7       	brne	.-38     	; 0x12e <main+0xa>
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	b4 d0       	rcall	.+360    	; 0x2c0 <Timer2_Volume>
 158:	ea cf       	rjmp	.-44     	; 0x12e <main+0xa>

0000015a <Timer0_Ini>:

void Timer0_Ini ( void ){
	/* 	Permanece igual, ocasionando una interrupci√≥n 
		cada 1 ms en modo CTC. */
	// 1ms: 0.001/(1/(16M/64) = 250 
	TCCR0A = (2<<WGM00);	//Iniciando CTC
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (3<<CS00);		//64PS
 15e:	93 e0       	ldi	r25, 0x03	; 3
 160:	95 bd       	out	0x25, r25	; 37
	TCNT0  = 0;				//Iniciando contador
 162:	16 bc       	out	0x26, r1	; 38
	OCR0A  = 250-1;			//1ms tope
 164:	99 ef       	ldi	r25, 0xF9	; 249
 166:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<<OCIE0A);	//Habilitando interrupcion
 168:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
	sei();					//Habilitando interrupciones gobales
 16c:	78 94       	sei
 16e:	08 95       	ret

00000170 <Timer2_Freq_Gen>:
		de Frecuencia del Timer2 con el tope dado por "ticks".
		De lo contrario se requiere deshabilitar el Generador, generando de 
		esta forma el silencio (0 l√≥gico).
		*/
		
	if(ticks > 0)
 170:	88 23       	and	r24, r24
 172:	51 f0       	breq	.+20     	; 0x188 <Timer2_Freq_Gen+0x18>
	{
		TCCR2A = (3<<WGM20);						 //PWM OCR2A TOP
 174:	93 e0       	ldi	r25, 0x03	; 3
 176:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
		TCCR2B = (6<<CS20)|(2<<COM2B0)|(1<<WGM22);	 //256PS, COM2B0 non inverting
 17a:	9e e2       	ldi	r25, 0x2E	; 46
 17c:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
		OCR2A  = ticks -1 ;							 //Tope en OCR2A
 180:	81 50       	subi	r24, 0x01	; 1
 182:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
 186:	08 95       	ret
	}else
	{
		TCCR2B &= ~(6<<CS20);			//Deshabilitando PS para 0 logico
 188:	e1 eb       	ldi	r30, 0xB1	; 177
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	89 7f       	andi	r24, 0xF9	; 249
 190:	80 83       	st	Z, r24
 192:	08 95       	ret

00000194 <__vector_21>:
	OCR0A  = 250-1;			//1ms tope
	TIMSK0 = (1<<OCIE0A);	//Habilitando interrupcion
	sei();					//Habilitando interrupciones gobales
}

ISR(TIMER0_COMPA_vect){ 
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	0b b6       	in	r0, 0x3b	; 59
 1a0:	0f 92       	push	r0
 1a2:	2f 93       	push	r18
 1a4:	3f 93       	push	r19
 1a6:	4f 93       	push	r20
 1a8:	5f 93       	push	r21
 1aa:	6f 93       	push	r22
 1ac:	7f 93       	push	r23
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	af 93       	push	r26
 1b4:	bf 93       	push	r27
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
	/* 	C√≥digo para actualizar bandera de segundos */
	static uint16_t mSeg;
	mSeg++;
 1be:	c0 91 18 03 	lds	r28, 0x0318	; 0x800318 <__data_end>
 1c2:	d0 91 19 03 	lds	r29, 0x0319	; 0x800319 <__data_end+0x1>
 1c6:	21 96       	adiw	r28, 0x01	; 1
 1c8:	d0 93 19 03 	sts	0x0319, r29	; 0x800319 <__data_end+0x1>
 1cc:	c0 93 18 03 	sts	0x0318, r28	; 0x800318 <__data_end>
	
	/*	Agregar las instrucciones necesarias para reproducir
		la siguiente nota en el arreglo dependiendo de la duraci√≥n, 
		e insertar los silencios entre cada nota. */
	if(mSeg <= cancion->delay)
 1d0:	e0 91 1f 03 	lds	r30, 0x031F	; 0x80031f <cancion>
 1d4:	f0 91 20 03 	lds	r31, 0x0320	; 0x800320 <cancion+0x1>
 1d8:	82 81       	ldd	r24, Z+2	; 0x02
 1da:	93 81       	ldd	r25, Z+3	; 0x03
 1dc:	8c 17       	cp	r24, r28
 1de:	9d 07       	cpc	r25, r29
 1e0:	d8 f0       	brcs	.+54     	; 0x218 <__vector_21+0x84>
	{
		Timer2_Freq_Gen(TICKS(cancion[cntNota].freq));	
 1e2:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <cntNota>
 1e6:	94 e0       	ldi	r25, 0x04	; 4
 1e8:	89 9f       	mul	r24, r25
 1ea:	e0 0d       	add	r30, r0
 1ec:	f1 1d       	adc	r31, r1
 1ee:	11 24       	eor	r1, r1
 1f0:	60 81       	ld	r22, Z
 1f2:	71 81       	ldd	r23, Z+1	; 0x01
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	94 e0       	ldi	r25, 0x04	; 4
 1f8:	c1 d0       	rcall	.+386    	; 0x37c <__udivmodhi4>
 1fa:	9b 01       	movw	r18, r22
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	74 e2       	ldi	r23, 0x24	; 36
 204:	84 ef       	ldi	r24, 0xF4	; 244
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	e0 d0       	rcall	.+448    	; 0x3ca <__divmodsi4>
 20a:	82 2f       	mov	r24, r18
 20c:	b1 df       	rcall	.-158    	; 0x170 <Timer2_Freq_Gen>
	}else
	{
		notaFin = 1;
		mSeg = 0;
	}
	if(notaFin && (mSeg <= SILENCE) )
 20e:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <notaFin>
 212:	81 11       	cpse	r24, r1
 214:	0d c0       	rjmp	.+26     	; 0x230 <__vector_21+0x9c>
 216:	1f c0       	rjmp	.+62     	; 0x256 <__vector_21+0xc2>
	if(mSeg <= cancion->delay)
	{
		Timer2_Freq_Gen(TICKS(cancion[cntNota].freq));	
	}else
	{
		notaFin = 1;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <notaFin>
		mSeg = 0;
 21e:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <__data_end+0x1>
 222:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <__data_end>
	}
	if(notaFin && (mSeg <= SILENCE) )
 226:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <notaFin>
 22a:	88 23       	and	r24, r24
 22c:	a1 f0       	breq	.+40     	; 0x256 <__vector_21+0xc2>
 22e:	02 c0       	rjmp	.+4      	; 0x234 <__vector_21+0xa0>
 230:	2b 97       	sbiw	r28, 0x0b	; 11
 232:	88 f4       	brcc	.+34     	; 0x256 <__vector_21+0xc2>
	{
		Timer2_Freq_Gen(TICKS(0));		//mandando silencio
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	94 e0       	ldi	r25, 0x04	; 4
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	b3 d0       	rcall	.+358    	; 0x3a4 <__divmodhi4>
 23e:	9b 01       	movw	r18, r22
 240:	77 0f       	add	r23, r23
 242:	44 0b       	sbc	r20, r20
 244:	55 0b       	sbc	r21, r21
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	74 e2       	ldi	r23, 0x24	; 36
 24a:	84 ef       	ldi	r24, 0xF4	; 244
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	bd d0       	rcall	.+378    	; 0x3ca <__divmodsi4>
 250:	82 2f       	mov	r24, r18
 252:	8e df       	rcall	.-228    	; 0x170 <Timer2_Freq_Gen>
 254:	03 c0       	rjmp	.+6      	; 0x25c <__vector_21+0xc8>
	}else
	{
		silFin = 1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <silFin>
	}
	
	if(notaFin && silFin)
 25c:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <notaFin>
 260:	88 23       	and	r24, r24
 262:	69 f0       	breq	.+26     	; 0x27e <__vector_21+0xea>
 264:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <silFin>
 268:	88 23       	and	r24, r24
 26a:	49 f0       	breq	.+18     	; 0x27e <__vector_21+0xea>
	{
		notaFin = 0;
 26c:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <notaFin>
		silFin = 0;
 270:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <silFin>
		cntNota ++;
 274:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <cntNota>
 278:	8f 5f       	subi	r24, 0xFF	; 255
 27a:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <cntNota>
	}
}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	bf 91       	pop	r27
 288:	af 91       	pop	r26
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	7f 91       	pop	r23
 290:	6f 91       	pop	r22
 292:	5f 91       	pop	r21
 294:	4f 91       	pop	r20
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0b be       	out	0x3b, r0	; 59
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <Timer2_Play>:

void Timer2_Play(const struct note song[],unsigned int len)
{	
	/*	Funci√≥n que establece las condiciones necesarias para que
		el generador recorra el arreglo de notas. */
	cancion = song;
 2a8:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <cancion+0x1>
 2ac:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <cancion>
	cntNota = 0;				//obteniendo principio de musica
 2b0:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <cntNota>
	Fin = len;			//Obteniendo final de musica
 2b4:	60 93 1d 03 	sts	0x031D, r22	; 0x80031d <Fin>
	volumen = 50;			//Volumen a la mitad
 2b8:	82 e3       	ldi	r24, 0x32	; 50
 2ba:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <volumen>
 2be:	08 95       	ret

000002c0 <Timer2_Volume>:
}

void Timer2_Volume(int8_t direction){
	/* 	Ajusta el ciclo de trabajo para incrementar o decrementar  el volumen
	   	de las notas que se estan generando. */
	if(direction == 1)
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	51 f4       	brne	.+20     	; 0x2d8 <Timer2_Volume+0x18>
	{
		if(volumen <= 80)
 2c4:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <volumen>
 2c8:	81 35       	cpi	r24, 0x51	; 81
 2ca:	78 f4       	brcc	.+30     	; 0x2ea <Timer2_Volume+0x2a>
		{
			volumen += 10;
 2cc:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <volumen>
 2d0:	86 5f       	subi	r24, 0xF6	; 246
 2d2:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <volumen>
 2d6:	09 c0       	rjmp	.+18     	; 0x2ea <Timer2_Volume+0x2a>
		}		
	}else
	{
		if( volumen >= 10)
 2d8:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <volumen>
 2dc:	8a 30       	cpi	r24, 0x0A	; 10
 2de:	28 f0       	brcs	.+10     	; 0x2ea <Timer2_Volume+0x2a>
		{
			volumen -= 10;
 2e0:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <volumen>
 2e4:	8a 50       	subi	r24, 0x0A	; 10
 2e6:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <volumen>
		}
	}
	OCR2B = (OCR2A*volumen)/100;
 2ea:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
 2ee:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <volumen>
 2f2:	89 9f       	mul	r24, r25
 2f4:	c0 01       	movw	r24, r0
 2f6:	11 24       	eor	r1, r1
 2f8:	64 e6       	ldi	r22, 0x64	; 100
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	53 d0       	rcall	.+166    	; 0x3a4 <__divmodhi4>
 2fe:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>
 302:	08 95       	ret

00000304 <UART0_Init>:
			exp = exp*10;
			count--;
		}
	}
	return num;
}
 304:	22 e0       	ldi	r18, 0x02	; 2
 306:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 30a:	28 e1       	ldi	r18, 0x18	; 24
 30c:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 310:	26 e0       	ldi	r18, 0x06	; 6
 312:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 316:	89 2b       	or	r24, r25
 318:	39 f4       	brne	.+14     	; 0x328 <UART0_Init+0x24>
 31a:	8f ec       	ldi	r24, 0xCF	; 207
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 322:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 326:	08 95       	ret
 328:	87 e6       	ldi	r24, 0x67	; 103
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 330:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 334:	08 95       	ret

00000336 <UART0_getchar>:
 336:	e0 ec       	ldi	r30, 0xC0	; 192
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	88 23       	and	r24, r24
 33e:	ec f7       	brge	.-6      	; 0x33a <UART0_getchar+0x4>
 340:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 344:	08 95       	ret

00000346 <UART0_AutoBaudRate>:

void UART0_AutoBaudRate(void)
{
	DDRE = ~(1<<PE0);		//PE0 input
 346:	8e ef       	ldi	r24, 0xFE	; 254
 348:	8d b9       	out	0x0d, r24	; 13
	UCSR0A = (1<<U2X0);		//Double speed
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0B = ((1<<RXEN0)|(1<<TXEN0))&(~(1<<UCSZ02)); // Reception enable | Transmission enable | 9bit disable
 350:	98 e1       	ldi	r25, 0x18	; 24
 352:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (3<<UCSZ00);	//8bit enable
 356:	96 e0       	ldi	r25, 0x06	; 6
 358:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	TCCR0A = 0;				//Normal Mode
 35c:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 2;				//8 PS
 35e:	85 bd       	out	0x25, r24	; 37
	while(PINE& (1<<PE0));	//Loop mientras haya 1
 360:	60 99       	sbic	0x0c, 0	; 12
 362:	fe cf       	rjmp	.-4      	; 0x360 <UART0_AutoBaudRate+0x1a>
	TCNT0 = 0;				//Inicializa contador
 364:	16 bc       	out	0x26, r1	; 38
	while(!(PINE&(1<<PE0)));//Loop mientras no sea en alto
 366:	60 9b       	sbis	0x0c, 0	; 12
 368:	fe cf       	rjmp	.-4      	; 0x366 <UART0_AutoBaudRate+0x20>
	TCCR0B = 0;
 36a:	15 bc       	out	0x25, r1	; 37
	UBRR0 = TCNT0 - 1;		//Setting Baud Rate
 36c:	86 b5       	in	r24, 0x26	; 38
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 376:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 37a:	08 95       	ret

0000037c <__udivmodhi4>:
 37c:	aa 1b       	sub	r26, r26
 37e:	bb 1b       	sub	r27, r27
 380:	51 e1       	ldi	r21, 0x11	; 17
 382:	07 c0       	rjmp	.+14     	; 0x392 <__udivmodhi4_ep>

00000384 <__udivmodhi4_loop>:
 384:	aa 1f       	adc	r26, r26
 386:	bb 1f       	adc	r27, r27
 388:	a6 17       	cp	r26, r22
 38a:	b7 07       	cpc	r27, r23
 38c:	10 f0       	brcs	.+4      	; 0x392 <__udivmodhi4_ep>
 38e:	a6 1b       	sub	r26, r22
 390:	b7 0b       	sbc	r27, r23

00000392 <__udivmodhi4_ep>:
 392:	88 1f       	adc	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	5a 95       	dec	r21
 398:	a9 f7       	brne	.-22     	; 0x384 <__udivmodhi4_loop>
 39a:	80 95       	com	r24
 39c:	90 95       	com	r25
 39e:	bc 01       	movw	r22, r24
 3a0:	cd 01       	movw	r24, r26
 3a2:	08 95       	ret

000003a4 <__divmodhi4>:
 3a4:	97 fb       	bst	r25, 7
 3a6:	07 2e       	mov	r0, r23
 3a8:	16 f4       	brtc	.+4      	; 0x3ae <__divmodhi4+0xa>
 3aa:	00 94       	com	r0
 3ac:	06 d0       	rcall	.+12     	; 0x3ba <__divmodhi4_neg1>
 3ae:	77 fd       	sbrc	r23, 7
 3b0:	08 d0       	rcall	.+16     	; 0x3c2 <__divmodhi4_neg2>
 3b2:	e4 df       	rcall	.-56     	; 0x37c <__udivmodhi4>
 3b4:	07 fc       	sbrc	r0, 7
 3b6:	05 d0       	rcall	.+10     	; 0x3c2 <__divmodhi4_neg2>
 3b8:	3e f4       	brtc	.+14     	; 0x3c8 <__divmodhi4_exit>

000003ba <__divmodhi4_neg1>:
 3ba:	90 95       	com	r25
 3bc:	81 95       	neg	r24
 3be:	9f 4f       	sbci	r25, 0xFF	; 255
 3c0:	08 95       	ret

000003c2 <__divmodhi4_neg2>:
 3c2:	70 95       	com	r23
 3c4:	61 95       	neg	r22
 3c6:	7f 4f       	sbci	r23, 0xFF	; 255

000003c8 <__divmodhi4_exit>:
 3c8:	08 95       	ret

000003ca <__divmodsi4>:
 3ca:	05 2e       	mov	r0, r21
 3cc:	97 fb       	bst	r25, 7
 3ce:	16 f4       	brtc	.+4      	; 0x3d4 <__divmodsi4+0xa>
 3d0:	00 94       	com	r0
 3d2:	0f d0       	rcall	.+30     	; 0x3f2 <__negsi2>
 3d4:	57 fd       	sbrc	r21, 7
 3d6:	05 d0       	rcall	.+10     	; 0x3e2 <__divmodsi4_neg2>
 3d8:	14 d0       	rcall	.+40     	; 0x402 <__udivmodsi4>
 3da:	07 fc       	sbrc	r0, 7
 3dc:	02 d0       	rcall	.+4      	; 0x3e2 <__divmodsi4_neg2>
 3de:	46 f4       	brtc	.+16     	; 0x3f0 <__divmodsi4_exit>
 3e0:	08 c0       	rjmp	.+16     	; 0x3f2 <__negsi2>

000003e2 <__divmodsi4_neg2>:
 3e2:	50 95       	com	r21
 3e4:	40 95       	com	r20
 3e6:	30 95       	com	r19
 3e8:	21 95       	neg	r18
 3ea:	3f 4f       	sbci	r19, 0xFF	; 255
 3ec:	4f 4f       	sbci	r20, 0xFF	; 255
 3ee:	5f 4f       	sbci	r21, 0xFF	; 255

000003f0 <__divmodsi4_exit>:
 3f0:	08 95       	ret

000003f2 <__negsi2>:
 3f2:	90 95       	com	r25
 3f4:	80 95       	com	r24
 3f6:	70 95       	com	r23
 3f8:	61 95       	neg	r22
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255
 3fc:	8f 4f       	sbci	r24, 0xFF	; 255
 3fe:	9f 4f       	sbci	r25, 0xFF	; 255
 400:	08 95       	ret

00000402 <__udivmodsi4>:
 402:	a1 e2       	ldi	r26, 0x21	; 33
 404:	1a 2e       	mov	r1, r26
 406:	aa 1b       	sub	r26, r26
 408:	bb 1b       	sub	r27, r27
 40a:	fd 01       	movw	r30, r26
 40c:	0d c0       	rjmp	.+26     	; 0x428 <__udivmodsi4_ep>

0000040e <__udivmodsi4_loop>:
 40e:	aa 1f       	adc	r26, r26
 410:	bb 1f       	adc	r27, r27
 412:	ee 1f       	adc	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	a2 17       	cp	r26, r18
 418:	b3 07       	cpc	r27, r19
 41a:	e4 07       	cpc	r30, r20
 41c:	f5 07       	cpc	r31, r21
 41e:	20 f0       	brcs	.+8      	; 0x428 <__udivmodsi4_ep>
 420:	a2 1b       	sub	r26, r18
 422:	b3 0b       	sbc	r27, r19
 424:	e4 0b       	sbc	r30, r20
 426:	f5 0b       	sbc	r31, r21

00000428 <__udivmodsi4_ep>:
 428:	66 1f       	adc	r22, r22
 42a:	77 1f       	adc	r23, r23
 42c:	88 1f       	adc	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	1a 94       	dec	r1
 432:	69 f7       	brne	.-38     	; 0x40e <__udivmodsi4_loop>
 434:	60 95       	com	r22
 436:	70 95       	com	r23
 438:	80 95       	com	r24
 43a:	90 95       	com	r25
 43c:	9b 01       	movw	r18, r22
 43e:	ac 01       	movw	r20, r24
 440:	bd 01       	movw	r22, r26
 442:	cf 01       	movw	r24, r30
 444:	08 95       	ret

00000446 <_exit>:
 446:	f8 94       	cli

00000448 <__stop_program>:
 448:	ff cf       	rjmp	.-2      	; 0x448 <__stop_program>
